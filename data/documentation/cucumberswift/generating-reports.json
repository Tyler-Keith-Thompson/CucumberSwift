{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Automatic-Reports","level":2,"type":"heading","text":"Automatic Reports"},{"type":"paragraph","inlineContent":[{"type":"text","text":"CucumberSwift has a JSON reporter that writes in real-time while your code is executing. Unfortunately because the simulator is sandboxed it can be a tad tricky to get at that report."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To help you get started here’s a script you can add as a post-action after running your tests in your Xcode scheme. It uses some XCode build variables to find the device you ran on, and get the Cucumber json file from it. This particular command can also pull reports off a physical device using the "},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/ios-control\/ios-deploy"},{"type":"text","text":" utility."}]},{"type":"codeListing","syntax":"bash","code":["#!\/bin\/bash -x","# set -x","# exec > \/tmp\/my_log_file.txt 2>&1","rm -f $SRCROOT\/CucumberReports\/ERROR.txt","mkdir -p $SRCROOT\/CucumberReports","if [ \"$TARGET_DEVICE_PLATFORM_NAME\" == \"iphonesimulator\" ]; then","    find ~\/Library\/Developer\/CoreSimulator\/Devices\/$TARGET_DEVICE_IDENTIFIER -name \"CucumberTestResultsFor$TARGETNAME.json\" -print0 | xargs -r -0 ls -1 -t | head -1 | xargs -I '{}' mv '{}' $SRCROOT\/CucumberReports","elif [ -x \"$(command -v ios-deploy)\" ]; then","    ios-deploy --download=\/Documents --bundle_id $PRODUCT_BUNDLE_IDENTIFIER.xctrunner --to \"$SRCROOT\/CucumberReports\"","    cp \"$SRCROOT\/CucumberReports\/Documents\/CucumberTestResultsFor$TARGETNAME.json\" \"$SRCROOT\/CucumberReports\/CucumberTestResultsFor$TARGETNAME.json\"","    rm -rf \"$SRCROOT\/CucumberReports\/Documents\/\"","else","    echo \"error: Unable to download CucumberSwift report from actual device, you need the ios-deploy tool installed! Install with 'brew install ios-deploy'\" > $SRCROOT\/CucumberReports\/ERROR.txt","    exit 1","fi"]},{"anchor":"Custom-Reporters","level":3,"type":"heading","text":"Custom Reporters"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you’d like to be notified about what the Cucumber runner saw during execution there are 2 steps needed."}]},{"anchor":"The-Test-Observer","level":3,"type":"heading","text":"The Test Observer"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Start by creating a test observer, something like this:"}]},{"type":"codeListing","syntax":"swift","code":["class MyTestObserver: CucumberTestObserver {","    func testSuiteStarted(at date: Date) { }","","    func testSuiteFinished(at date: Date) { }","","    func didStart(feature: Feature, at date: Date) { }","","    func didStart(scenario: Scenario, at date: Date) { }","","    func didStart(step: Step, at date: Date) { }","","    func didFinish(feature: Feature, result: Reporter.Result, duration: Measurement<UnitDuration>) { }","","    func didFinish(scenario: Scenario, result: Reporter.Result, duration: Measurement<UnitDuration>) { }","","    func didFinish(step: Step, result: Reporter.Result, duration: Measurement<UnitDuration>) { }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note the duration is a "},{"type":"codeVoice","code":"Measurement"},{"type":"text","text":" type, by default its value is in nanoseconds but you can convert that to whatever makes sense, like this:"}]},{"type":"codeListing","syntax":"swift","code":["duration.converted(to: .seconds).value \/\/ value in seconds"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Next you’ll want to add your reporter to a list of reporters Cucumber knows about by extending it, like this:"}]},{"type":"codeListing","syntax":"swift","code":["extension Cucumber: CucumberTestObservable {","    public var observers: [CucumberTestObserver] {","        [ MyTestObserver() ]","    }","}"]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/cucumberswift\/generating-reports"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/CucumberSwift\/documentation\/CucumberSwift\/Generating-Reports","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Reports are an important part of what Cucumber does, it allows us to see the specification in Gherkin executed."}],"kind":"article","metadata":{"roleHeading":"Article","title":"Generating Reports","role":"article","modules":[{"name":"CucumberSwift"}]},"hierarchy":{"paths":[["doc:\/\/CucumberSwift\/documentation\/CucumberSwift"]]},"seeAlsoSections":[{"title":"Discussions","identifiers":["doc:\/\/CucumberSwift\/tutorials\/Tutorial-Table-of-Contents","doc:\/\/CucumberSwift\/documentation\/CucumberSwift\/Matching-Steps","doc:\/\/CucumberSwift\/documentation\/CucumberSwift\/Hooks","doc:\/\/CucumberSwift\/documentation\/CucumberSwift\/CucumberSwift+UIUTest"],"generated":true}],"references":{"doc://CucumberSwift/documentation/CucumberSwift/Hooks":{"role":"article","title":"Hooks","abstract":[{"type":"text","text":"Hooks are used to tie into CucumberSwift’s runtime. They are great for setting up preconditions before a feature, or cleaning up after it is completed."}],"identifier":"doc:\/\/CucumberSwift\/documentation\/CucumberSwift\/Hooks","kind":"article","type":"topic","url":"\/documentation\/cucumberswift\/hooks"},"doc://CucumberSwift/documentation/CucumberSwift/Matching-Steps":{"role":"article","title":"Matching Steps","abstract":[{"type":"text","text":"Gherkin defined in "},{"type":"codeVoice","code":".feature"},{"type":"text","text":" files can be matched in several ways. All matching is done using global functions that align with gherkin keywords. For example, "},{"type":"reference","isActive":true,"identifier":"doc:\/\/CucumberSwift\/documentation\/CucumberSwift\/Given"},{"type":"text","text":", "},{"type":"reference","isActive":true,"identifier":"doc:\/\/CucumberSwift\/documentation\/CucumberSwift\/When"},{"type":"text","text":", and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/CucumberSwift\/documentation\/CucumberSwift\/Then"},{"type":"text","text":" functions. These functions are also localized, so if you’d rather use spanish you can use "},{"type":"reference","isActive":true,"identifier":"doc:\/\/CucumberSwift\/documentation\/CucumberSwift\/ES_Dado"},{"type":"text","text":"."}],"identifier":"doc:\/\/CucumberSwift\/documentation\/CucumberSwift\/Matching-Steps","kind":"article","type":"topic","url":"\/documentation\/cucumberswift\/matching-steps"},"doc://CucumberSwift/documentation/CucumberSwift/ES_Dado":{"role":"symbol","title":"ES_Dado","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"ES_Dado"}],"abstract":[],"identifier":"doc:\/\/CucumberSwift\/documentation\/CucumberSwift\/ES_Dado","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ES_Dado"}],"url":"\/documentation\/cucumberswift\/es_dado"},"doc://CucumberSwift/documentation/CucumberSwift/CucumberSwift+UIUTest":{"role":"article","title":"CucumberSwift+UIUTest","abstract":[{"type":"text","text":"A colleague of mine wrote "},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/nallick\/UIUTest"},{"type":"text","text":" which allows for UI testing in a unit testing bundle. It drastically speeds up UI tests but gives a lot of the same functionality, like making sure elements are not covered, able to be tapped etc…"}],"identifier":"doc:\/\/CucumberSwift\/documentation\/CucumberSwift\/CucumberSwift+UIUTest","kind":"article","type":"topic","url":"\/documentation\/cucumberswift\/cucumberswift+uiutest"},"doc://CucumberSwift/documentation/CucumberSwift/Given":{"role":"symbol","title":"Given","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"Given"}],"abstract":[],"identifier":"doc:\/\/CucumberSwift\/documentation\/CucumberSwift\/Given","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Given"}],"url":"\/documentation\/cucumberswift\/given"},"https://github.com/ios-control/ios-deploy":{"title":"ios-deploy","titleInlineContent":[{"type":"text","text":"ios-deploy"}],"type":"link","identifier":"https:\/\/github.com\/ios-control\/ios-deploy","url":"https:\/\/github.com\/ios-control\/ios-deploy"},"https://github.com/nallick/UIUTest":{"title":"UIUTest","titleInlineContent":[{"type":"text","text":"UIUTest"}],"type":"link","identifier":"https:\/\/github.com\/nallick\/UIUTest","url":"https:\/\/github.com\/nallick\/UIUTest"},"doc://CucumberSwift/documentation/CucumberSwift":{"role":"collection","title":"CucumberSwift","abstract":[{"type":"text","text":"a lightweight Cucumber implementation for iOS, tvOS, and macOS."}],"identifier":"doc:\/\/CucumberSwift\/documentation\/CucumberSwift","kind":"symbol","type":"topic","url":"\/documentation\/cucumberswift"},"doc://CucumberSwift/documentation/CucumberSwift/Then":{"role":"symbol","title":"Then","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"Then"}],"abstract":[],"identifier":"doc:\/\/CucumberSwift\/documentation\/CucumberSwift\/Then","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Then"}],"url":"\/documentation\/cucumberswift\/then"},"doc://CucumberSwift/documentation/CucumberSwift/When":{"role":"symbol","title":"When","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"When"}],"abstract":[],"identifier":"doc:\/\/CucumberSwift\/documentation\/CucumberSwift\/When","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"When"}],"url":"\/documentation\/cucumberswift\/when"},"doc://CucumberSwift/tutorials/Tutorial-Table-of-Contents":{"role":"overview","title":"Getting Started with CucumberSwift","abstract":[{"type":"text","text":"This getting started series will walk you through installation and basic setup of CucumberSwift on your project."}],"identifier":"doc:\/\/CucumberSwift\/tutorials\/Tutorial-Table-of-Contents","kind":"overview","type":"topic","url":"\/tutorials\/tutorial-table-of-contents"}}}